---
title: "homework 4"
uniqname: "mchenran"
format: 
  html:   
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
---

The link to my github repository: [homework 4](https://github.com/snuuym/stats506/tree/main/homework%204)

## Problem 1
```{r}
library(dplyr)
library(tidyr)
library(nzelect)
data("nzge")
```
### a.  
Generate a table (which can just be a nicely printed tibble) of vote count (regardless of party) per year/type. Make sure to sort it by vote count.
```{r}
vote_table <- 
    nzge %>%
    group_by(voting_type, election_year) %>%
    summarise(total_votes = sum(votes)) %>%
    arrange(desc(total_votes))

vote_table
```
### b. 
Focus only on the 2014 election. Report the proportion of votes for each party in the Candidate election. Again, produce a nice table and sort it by percent of vote.
```{r}
vote_2014 <- 
    nzge %>%
    filter(election_year == 2014, voting_type == "Candidate") %>%
    group_by(party) %>%
    summarise(party_vote = sum(votes)) %>%
    mutate(percent_vote = 100 * party_vote / sum(party_vote)) %>%
    arrange(desc(party_vote))

vote_2014
```
### c.  
Produce a nice table indicating, for each year, which party won the Candidate vote and which party won the Party vote.
```{r}
#chatgpt taught me the way to select the max value
party_won <- 
    nzge %>%
    group_by(party, election_year, voting_type) %>%
    summarise(party_vote = sum(votes)) %>%
    group_by(election_year, voting_type) %>%
    slice_max(order_by = party_vote, n = 1) %>%
    arrange(election_year)

party_won
```
## Problem 2
```{r}
data <- read.csv("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/refs/heads/master/atp_matches_2019.csv")
head(data)
colnames(data)
```
### a.  
How many tournaments took place in 2019?
```{r}
library(dplyr)
library(tidyr)
data %>% 
  filter(substr(tourney_date, 1, 4) == "2019") %>% 
  summarise(total_tournaments = n_distinct(tourney_id))
```

### b.  
Did any player win more than one tournament? If so, how many players won more than one tournament, and how many tournaments did the most winning player(s) win?
```{r}
winners <- data %>% 
  filter(round == "F") %>%
  group_by(winner_id) %>%
  summarise(total_win = n_distinct(tourney_id)) %>%
  filter(total_win > 1) %>%
  arrange(desc(total_win))
```
Ans: There are 12 winners with more than 1 match. The most winning player wins 5 tournments.

### c.  
Is there any evidence that winners have more aces than losers?
```{r}
library(dplyr)
library(infer)
data %>% select(w_ace, l_ace) %>%
  mutate(diff = w_ace - l_ace) %>%
  t_test(response = diff, mu = 0) 
```
Ans: From the estimate value and the p-value of the t-test we can say that there is evidence that winners have more aces than losers.

### d.  
Identify the player(s) with the highest win-rate. (Note that this is NOT asking for the highest number of wins.) Restrict to players with at least 5 matches.

```{r}
player <- data %>%
  select(winner_id, loser_id, winner_name, loser_name, tourney_id) %>%
  pivot_longer(cols = c(winner_id, loser_id),
               names_to = "match_result",
               values_to = "player_id") %>%
  mutate(player_name = if_else(match_result == "winner_id", 
                               winner_name, 
                               loser_name)) %>%
  group_by(player_id, player_name) %>%
  summarise(total_matches = n())

match_win <- data %>% 
  group_by(winner_id, winner_name) %>%
  summarise(total_win = n())

player_stats <- player %>%
  left_join(match_win, join_by("player_id" == "winner_id", "player_name" == "winner_name")) %>%
  mutate(total_win = replace_na(total_win, 0),
         win_rate = total_win / total_matches) %>%
  filter(total_matches >= 5) %>%
  arrange(desc(win_rate))
head(player_stats,5)
```
Ans: Rafael Nadal has the highest winning rate.

## Problem 3
```{r}
data <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/refs/heads/master/rolling-averages/us-states.csv")
head(data)
colnames(data)
```
###a. 
How many major and minor spikes in cases were there?
```{r}
#chatgpt taught me how to use ymd() to change date into date type so that it can be further manipulated.
library(ggplot2)
library(lubridate)
covid <- data %>% 
  group_by(date) %>%
  summarise(usa_cases = mean(cases_avg_per_100k))

ggplot(covid, aes(x = ymd(date), y = usa_cases)) + 
  geom_line(linewidth = 1) +
  geom_point() +
  scale_x_date(
    date_breaks = "3 months",
    date_labels = "%b %Y"
  )+
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```
Ans: There is 1 major spike and 3 minor spikes there.

### b. 
For the states with the highest and lowest overall rates per population, what differences do you see in their trajectories over time?
```{r}
states <- data %>% 
  group_by(state) %>%
  summarise(overall_rate = mean(cases_avg,na.rm = TRUE))
high_state <- states %>% slice_max(overall_rate, n = 1) %>% pull(state)
low_state  <- states %>% slice_min(overall_rate, n = 1) %>% pull(state)

prob_b <- data %>% 
  filter(state %in% c(high_state,low_state))

ggplot(prob_b, aes(x = ymd(date), y = cases_avg, color = state, group = state)) + 
  geom_line(linewidth=1)  +
    scale_x_date(
    date_breaks = "3 months",
    date_labels = "%b %Y"
  )+
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

### c. 
Identify, to the best of your ability without a formal test, the first five states to experience Covid in a substantial way.
```{r}
first_wave <- data %>%
  filter(cases_avg_per_100k > 1) %>%
  group_by(state) %>%
  summarize(first_date = min(date)) %>%
  arrange(first_date) %>%
  slice_head(n = 5)

first_states <- first_wave$state


data %>%
  filter(state %in% first_states) %>%
  ggplot(aes(x = ymd(date), y = cases_avg_per_100k, color = state,group = state)) +
  geom_line(linewidth=0.5)  +
    scale_x_date(
    date_breaks = "3 months",
    date_labels = "%b %Y"
  )+
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```










